# GPU-ready, slim Docker image for Windows Docker Desktop users
# Mount your repo with -v and run with --gpus all
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Seoul

# Minimal toolchain required for building & running the project
# Kept: build-essential, cmake, pkg-config, libssl-dev, git, curl/wget, dos2unix, python3-minimal
# Removed: patchelf, clang/llvm, lldb, jq, protobuf-compiler (not needed unless you compile .proto)
RUN apt-get update && apt-get install -y --no-install-recommends \
    bash ca-certificates curl wget git \
    build-essential cmake pkg-config libssl-dev \
    python3-minimal dos2unix \
 && rm -rf /var/lib/apt/lists/*

# Node.js 20 (tarball install to avoid extra apt repos)
ENV NODE_VERSION=20.14.0
RUN curl -fsSL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz \
 | tar -xJ -C /usr/local --strip-components=1

# Rust (rustup) — minimal profile is sufficient for circom and backend builds
RUN curl -fsSL https://sh.rustup.rs | sh -s -- -y --profile minimal
ENV PATH="/root/.cargo/bin:/usr/local/bin:${PATH}"

# Circom — build once and install the binary
# Optionally pin to a specific commit for reproducibility (replace 'main' with a commit hash)
RUN git clone --depth=1 https://github.com/iden3/circom.git /tmp/circom \
 && cd /tmp/circom && cargo build --release --locked \
 && install -m 0755 target/release/circom /usr/local/bin/circom \
 && rm -rf /tmp/circom

# Friendlier prompt
RUN echo 'export PS1="\\w\\$ "' >> /root/.bashrc

# Workdir: mount your host repo at /workspace
WORKDIR /workspace

# Default to bash; run container with:
#   docker build -f Docker_for_Windows -t tokamak-zkevm:win .
#   docker run --gpus all --rm -it -v "<ABS_PATH_TO_REPO>:/workspace" -w /workspace tokamak-zkevm:win bash
CMD ["bash"]