name: Required Integration Tests

on:
  pull_request:
    branches: [main, dev, ale-150]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, dev, ale-150]

jobs:
  # Job 1: 실제 트랜잭션으로 증명 생성 테스트
  proof-generation-test:
    name: Proof Generation Test
    runs-on: macos-latest
    timeout-minutes: 45

    strategy:
      matrix:
        # TON Transfer 테스트만 실행
        test_case:
          - name: 'ton-transfer'
            tx_hash: '0x6c7903e420c5efb27639f5186a7474ef2137f12c786a90b4efdcb5d88dfdb002'
            description: 'TON Transfer'

      fail-fast: false # 하나 실패해도 다른 테스트 계속 진행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install system dependencies
        run: |
          # macOS에서는 homebrew 사용
          brew install dos2unix cmake

      - name: Install Rust and Cargo
        uses: dtolnay/rust-toolchain@stable

      - name: Install circom
        run: |
          # Install circom 2.2.2 for macOS
          wget https://github.com/iden3/circom/releases/download/v2.2.2/circom-macos-amd64
          chmod +x circom-macos-amd64
          sudo mv circom-macos-amd64 /usr/local/bin/circom
          circom --version

      - name: Make tokamak-cli executable
        run: chmod +x ./tokamak-cli

      - name: Setup environment
        env:
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY || 'test_api_key_placeholder' }}
        run: |
          # 파일 권한 및 라인 엔딩 수정
          echo "🔧 Fixing file permissions and line endings..."
          find . -name "*.sh" -exec chmod +x {} \;
          find . -name "*.sh" -exec dos2unix {} \; 2>/dev/null || true

          # npm 의존성 문제 해결을 위해 npm install 사용
          echo "🔧 Installing dependencies with npm install instead of npm ci..."
          cd packages/frontend/qap-compiler && npm install --legacy-peer-deps
          cd ../synthesizer && npm install --legacy-peer-deps
          cd ../../..

          # tsx 글로벌 설치 (synthesizer에서 필요)
          npm install -g tsx
          ./tokamak-cli --install "$ALCHEMY_API_KEY"

      - name: Generate proof for ${{ matrix.test_case.name }}
        run: |
          echo "🧪 Testing: ${{ matrix.test_case.description }}"
          echo "📋 TX Hash: ${{ matrix.test_case.tx_hash }}"

          # 증명 생성 시도
          ./tokamak-cli --prove "${{ matrix.test_case.tx_hash }}" "./proof_${{ matrix.test_case.name }}"

      - name: Validate proof artifacts
        run: |
          # 필수 파일들이 생성되었는지 확인
          test -f "./proof_${{ matrix.test_case.name }}/transaction_hash.txt"
          test -f "./proof_${{ matrix.test_case.name }}/proof.json"

          # 트랜잭션 해시가 올바르게 저장되었는지 확인
          stored_hash=$(cat "./proof_${{ matrix.test_case.name }}/transaction_hash.txt")
          if [[ "$stored_hash" != "${{ matrix.test_case.tx_hash }}" ]]; then
            echo "❌ Transaction hash mismatch!"
            echo "Expected: ${{ matrix.test_case.tx_hash }}"
            echo "Got: $stored_hash"
            exit 1
          fi

          echo "✅ Proof validation passed for ${{ matrix.test_case.name }}"

      - name: Upload proof artifacts
        if: always() # 실패해도 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: proof-artifacts-${{ matrix.test_case.name }}-${{ github.run_number }}
          path: ./proof_${{ matrix.test_case.name }}/
          retention-days: 7

  # Job 2: 최종 상태 체크
  final-status:
    name: Final Status Check
    runs-on: macos-latest
    needs: proof-generation-test
    if: always()

    steps:
      - name: Check all tests passed
        run: |
          echo "🔍 Checking test results..."

          # needs context에서 모든 job의 결과 확인
          proof_result="${{ needs.proof-generation-test.result }}"

          echo "Proof Generation: $proof_result"

          if [[ "$proof_result" != "success" ]]; then
            echo "❌ Proof generation test failed!"
            echo "🚫 This PR cannot be merged until all tests pass."
            exit 1
          fi

          echo "✅ All tests passed! Ready for merge."
